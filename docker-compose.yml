version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: auth-system-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: auth-system
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - auth-network

  # Redis for session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: auth-system-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - auth-network

  # Backend Server
  server:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: auth-system-server
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=5000
      - MONGODB_URI=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD}@mongodb:27017/auth-system?authSource=admin
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - CLIENT_URL=${CLIENT_URL:-http://localhost:3000}
      - SESSION_SECRET=${SESSION_SECRET}
      - REDIS_URL=redis://redis:6379
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app/server
      - /app/server/node_modules
    depends_on:
      - mongodb
      - redis
    networks:
      - auth-network
    command: npm run server

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: auth-system-client
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=${CLIENT_URL:-http://localhost:5000}
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - server
    networks:
      - auth-network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: auth-system-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - server
      - client
    networks:
      - auth-network

  # MongoDB Express (optional - for database management)
  mongo-express:
    image: mongo-express:latest
    container_name: auth-system-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - auth-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  auth-network:
    driver: bridge 